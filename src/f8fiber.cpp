//-----------------------------------------------------------------------------------------
// f8_fiber based on boost::fiber, x86_64 / linux only / de-boosted
// Modifications Copyright (C) 2022 Fix8 Market Technologies Pty Ltd
//
// fcontext_t, jump_fcontext, make_fcontext, ontop_fcontext
//	create_fcontext_stack, destroy_fcontext_stack, boost::fiber
//          Copyright Oliver Kowalke 2013.
//
// Distributed under the Boost Software License, Version 1.0 August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------------------
// Detect posix
#if !defined(_WIN32) && (defined(__unix__) || defined(__unix) || (defined(__APPLE__) && defined(__MACH__)))
#   include <unistd.h>
#else
#error This implementation of fcontext does not support Windows
#endif

#include <assert.h>
#include <math.h>
#include <string.h>
#include <sys/resource.h>
#include <sys/mman.h>

#include <fix8/f8fiber.hpp>

//-----------------------------------------------------------------------------------------
using namespace FIX8;

//-----------------------------------------------------------------------------------------
#if !defined (SIGSTKSZ)
# define SIGSTKSZ 131072 // 128kb recommended
#endif

#if !defined (MINSIGSTKSZ)
# define MINSIGSTKSZ 32768 // 32kb minimum
#endif

//-----------------------------------------------------------------------------------------
namespace
{
	size_t getPageSize()
	{
		/* conform to POSIX.1-2001 */
		return static_cast<size_t>(sysconf(_SC_PAGESIZE));
	}

	size_t getMaxSize()
	{
		struct rlimit limit;
		getrlimit(RLIMIT_STACK, &limit);
		return static_cast<size_t>(limit.rlim_max);
	}
}

//-----------------------------------------------------------------------------------------
/* Stack allocation and protection*/
fcontext_stack_t FIX8::create_fcontext_stack(size_t size)
{
	/* fix size */
	if (size == 0)
		size = SIGSTKSZ;
	const size_t minsz { MINSIGSTKSZ }, maxsz { getMaxSize() };
	if (size < minsz)
		size = minsz;
	if (size > maxsz)
		size = maxsz;

	const size_t pages { static_cast<size_t>(floorf(static_cast<float>(size)/static_cast<float>(getPageSize()))) };
	assert(pages >= 2);     /* at least two pages must fit into stack (one page is guard-page) */

	size_t size_ { pages * getPageSize() };
	assert(size_ != 0 && size != 0 && size_ <= size);

	void *vp { mmap(nullptr, size_, PROT_READ | PROT_WRITE, MAP_PRIVATE |
# if defined(MAP_ANON)
	MAP_ANON
# else
	MAP_ANONYMOUS
# endif
		,-1, 0) };
	if (vp == MAP_FAILED)
		return {};
	mprotect(vp, getPageSize(), PROT_NONE);
	return { static_cast<char*>(vp) + size_, size_ };
}

//-----------------------------------------------------------------------------------------
void FIX8::destroy_fcontext_stack(fcontext_stack_t& stckp)
{
	if (stckp.sptr)
	{
		assert(stckp.ssize >= MINSIGSTKSZ);
		assert(stckp.ssize <= getMaxSize());
		void *vp { static_cast<char*>(stckp.sptr) - stckp.ssize };
		munmap(vp, stckp.ssize);
		stckp = {};
	}
}

//-----------------------------------------------------------------------------------------
// fcontext_transfer_t jump_fcontext(const fcontext_t to, void *vp);
asm(R"(.text
.globl jump_fcontext
.type jump_fcontext,@function
.align 16
jump_fcontext:
	leaq  -0x38(%rsp), %rsp
	stmxcsr  (%rsp)
	fnstcw   0x4(%rsp)
	movq  %r12,0x8(%rsp)
	movq  %r13,0x10(%rsp)
	movq  %r14,0x18(%rsp)
	movq  %r15,0x20(%rsp)
	movq  %rbx,0x28(%rsp)
	movq  %rbp,0x30(%rsp)
	movq  %rsp,%rax
	movq  %rdi,%rsp
	movq  0x38(%rsp),%r8
	ldmxcsr (%rsp)
	fldcw   0x4(%rsp)
	movq  0x8(%rsp),%r12
	movq  0x10(%rsp),%r13
	movq  0x18(%rsp),%r14
	movq  0x20(%rsp),%r15
	movq  0x28(%rsp),%rbx
	movq  0x30(%rsp),%rbp
	leaq  0x40(%rsp),%rsp
	movq  %rsi,%rdx
	movq  %rax,%rdi
	jmp  *%r8
.size jump_fcontext,.-jump_fcontext
.section .note.GNU-stack,"",%progbits
)");

//-----------------------------------------------------------------------------------------
// fcontext_t make_fcontext(void *sp, size_t size, void (*fn)(fcontext_transfer_t));
asm(R"(.text
.globl make_fcontext
.type make_fcontext,@function
.align 16
make_fcontext:
	movq  %rdi,%rax
	andq  $-16,%rax
	leaq  -0x40(%rax),%rax
	movq  %rdx,0x28(%rax)
	stmxcsr (%rax)
	fnstcw  0x4(%rax)
	leaq  trampoline(%rip),%rcx
	movq  %rcx,0x38(%rax)
	leaq  finish(%rip),%rcx
	movq  %rcx,0x30(%rax)
	ret
trampoline:
	push %rbp
	jmp *%rbx
finish:
	xorq  %rdi,%rdi
	call  _exit@PLT
	hlt
.size make_fcontext,.-make_fcontext
.section .note.GNU-stack,"",%progbits
)");

//-----------------------------------------------------------------------------------------
// fcontext_transfer_t ontop_fcontext(const fcontext_t to, void *vp, fcontext_transfer_t (*fn)(fcontext_transfer_t));
asm(R"(.text
.globl ontop_fcontext
.type ontop_fcontext,@function
.align 16
ontop_fcontext:
	movq  %rdx,%r8
	leaq  -0x38(%rsp),%rsp
	stmxcsr (%rsp)
	fnstcw  0x4(%rsp)
	movq  %r12,0x8(%rsp)
	movq  %r13,0x10(%rsp)
	movq  %r14,0x18(%rsp)
	movq  %r15,0x20(%rsp)
	movq  %rbx,0x28(%rsp)
	movq  %rbp,0x30(%rsp)
	movq  %rsp,%rax
	movq  %rdi,%rsp
	ldmxcsr (%rsp)
	fldcw   0x4(%rsp)
	movq  0x8(%rsp),%r12
	movq  0x10(%rsp),%r13
	movq  0x18(%rsp),%r14
	movq  0x20(%rsp),%r15
	movq  0x28(%rsp),%rbx
	movq  0x30(%rsp),%rbp
	leaq  0x38(%rsp),%rsp
	movq  %rsi,%rdx
	movq  %rax,%rdi
	jmp  *%r8
.size ontop_fcontext,.-ontop_fcontext
.section .note.GNU-stack,"",%progbits
)");

